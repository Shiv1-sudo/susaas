name: SUSaaS CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 bandit

    - name: Lint with flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Static analysis with bandit
      run: |
        cd backend
        bandit -r . -ll

    # Terraform setup
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6

    - name: Terraform Init
      run: terraform init
      working-directory: ./infrastructure

    - name: Terraform Format
      run: terraform fmt -check
      working-directory: ./infrastructure

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infrastructure

    - name: Create secrets.auto.tfvars
      run: |
        cat <<EOF > infrastructure/secrets.auto.tfvars
        client_id     = "${{ secrets.ARM_CLIENT_ID }}"
        client_secret = "${{ secrets.ARM_CLIENT_SECRET }}"
        subscription_id = "${{ secrets.ARM_SUBSCRIPTION_ID }}"
        tenant_id = "${{ secrets.ARM_TENANT_ID }}"
        EOF

    - name: Terraform Plan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform plan -var-file="secrets.auto.tfvars" -var-file="terraform.tfvars"
      working-directory: ./infrastructure

    # **ADDED: Apply Terraform to deploy infra**
    - name: Terraform Apply
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      run: terraform apply -auto-approve -var-file="secrets.auto.tfvars" -var-file="terraform.tfvars"
      working-directory: ./infrastructure

    # Docker Build + Scan + Test

    # **ADDED: Docker login to Docker Hub (replace with your DockerHub credentials secrets)**
    - name: Docker Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: docker build -t susaas-backend ./backend

    # **ADDED: Tag and push Docker image to Docker Hub**
    - name: Tag Docker image
      run: docker tag susaas-backend ${{ secrets.DOCKER_USERNAME }}/susaas-backend:latest

    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/susaas-backend:latest

    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@v0.19.0   # pinned version
      with:
        image-ref: susaas-backend
        format: table
        ignore-unfixed: true
        vuln-type: os,library

    - name: Run container for testing
      run: |
        docker run -d -p 8000:8000 --name susaas-test susaas-backend
        sleep 10

    - name: OWASP ZAP Baseline Scan
      run: |
        docker run --network host \
          -v $(pwd):/zap/wrk:rw \
          -t owasp/zap2docker-stable zap-baseline.py \
          -t http://localhost:8000/docs \
          -r zap-report.html \
          -J zap-report.json \
          -x zap-report.xml \
          -m 3

    - name: Upload ZAP Report
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: |
          zap-report.html
          zap-report.json
          zap-report.xml

    - name: Stop test container
      run: docker stop susaas-test && docker rm susaas-test
